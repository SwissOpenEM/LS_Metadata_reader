// generator.go
package main

import (
	"encoding/csv"
	"fmt"
	"os"
	"text/template"
)

type Field struct {
	Name string
	Type string
}
type Struct struct {
	Name   string
	Fields []Field
}

// Template for generating Go structs
const tmpl = `// Code generated by go generate; DO NOT EDIT.
package generated

import (
	"LS_reader/conversion/basetypes"
)

{{range .}}
type {{.Name}} struct {
{{- range .Fields}}
	{{.Name}} {{.Type}}
{{- end}}
}
{{end}}
`

func main() {
	file, err := os.Open("../conversions.csv")
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()
	reader := csv.NewReader(file)
	records, err := reader.ReadAll()
	if err != nil {
		fmt.Println("Error reading CSV file:", err)
		return
	}

	structsMap := make(map[string][]Field)
	for _, record := range records[1:] {
		if record[0] == "" {
			continue
		}
		structName := record[0]
		fieldName := record[1]
		fieldType := "basetypes." + record[9]
		if record[2] != "" {
			if _, exists := structsMap[fieldName]; !exists {
				structsMap[structName] = append(structsMap[structName], Field{
					Name: fieldName,
					Type: "*" + fieldName,
				})
			}
			structName = record[1]
			fieldName = record[2]
			if record[3] != "" {
				if _, exists := structsMap[fieldName]; !exists {
					structsMap[structName] = append(structsMap[structName], Field{
						Name: fieldName,
						Type: "*" + fieldName,
					})
				}
				structName = record[2]
				fieldName = record[3]
			}
		}
		if _, exists := structsMap[fieldName]; !exists {
			structsMap[structName] = append(structsMap[structName], Field{
				Name: fieldName,
				Type: fieldType,
			})
		}
	}
	var structs []Struct
	for name, fields := range structsMap {
		structs = append(structs, Struct{
			Name:   name,
			Fields: fields,
		})
	}
	t := template.Must(template.New("code").Parse(tmpl))
	out, err := os.Create("../generated/structs.go")
	if err != nil {
		fmt.Println("Error creating output file:", err)
		return
	}
	defer out.Close()

	err = t.Execute(out, structs)
	if err != nil {
		fmt.Println("Error executing template:", err)
	}
}
